name: Backend Tests

on:
  push:
    branches: [main, develop]
    paths: 
      - 'packages/backend/**'
      - '.github/workflows/test-backend.yml'
  pull_request:
    branches: [main]
    paths: 
      - 'packages/backend/**'
      - '.github/workflows/test-backend.yml'

jobs:
  test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Verify Go Installation
        run: go version
        
      - name: Install dependencies
        run: |
          npm ci
          npm ci -w packages/backend
        
      - name: Run ESLint
        run: npm run lint -w packages/backend
        
      - name: Build backend
        run: npm run build -w packages/backend
        
      - name: Install MongoDB tools
        run: |
          wget -qO - https://www.mongodb.org/static/pgp/server-7.0.asc | sudo apt-key add -
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh
          
      - name: Wait for MongoDB
        run: |
          until mongosh --host localhost:27017 --username admin --password password --authenticationDatabase admin --eval "db.adminCommand('ping')" --quiet; do
            echo "Waiting for MongoDB..."
            sleep 5
          done
          echo "MongoDB is ready"
        
      - name: Run unit tests
        run: npm run test:unit -w packages/backend
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://admin:password@localhost:27017/test?authSource=admin
          JWT_SECRET: test-jwt-secret-for-ci
          USE_NATIVE_GO_EXECUTOR: false
          DOCKER_TIMEOUT: 10000
          TEST_VERBOSE: false
          
      - name: Run integration tests  
        run: npm run test:integration -w packages/backend
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://admin:password@localhost:27017/test?authSource=admin
          JWT_SECRET: test-jwt-secret-for-ci
          USE_NATIVE_GO_EXECUTOR: false
          DOCKER_TIMEOUT: 15000
          TEST_VERBOSE: false
          
      - name: Run all tests with coverage
        run: npm run test:coverage -w packages/backend
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://admin:password@localhost:27017/test?authSource=admin
          JWT_SECRET: test-jwt-secret-for-ci
          USE_NATIVE_GO_EXECUTOR: false
          DOCKER_TIMEOUT: 15000
          TEST_VERBOSE: false
          
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          lcov-file: ./packages/backend/coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          title: Backend Test Coverage Report
          
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci
          npm ci -w packages/backend
          
      - name: Run security audit
        run: npm audit --audit-level moderate -w packages/backend
        
      - name: Run dependency check
        run: npx audit-ci --config .audit-ci.json -w packages/backend || true